#!/usr/bin/env python3
##
## EPITECH PROJECT, 2018
## 103_cipher
## File description:
## math
##

import sys
import math

def get_mat_size():
    i = 2
    while len(sys.argv[2]) > i * i:
        i += 1
    return(i)

def matrice_txt(mat_size):
    matrice = []
    i = 0
    size = len(sys.argv[1])
    while i < size:
        matb = mat_size * [0]
        j = 0
        while j < mat_size and i < size:
            matb[j] = ord(sys.argv[1][i])
            j += 1
            i += 1
        matrice.append(matb)
    return(matrice)

def print_matrice_txt(matrice, mat_size):
    i = 0
    message = []
    print("Encrypted message")
    for i in matrice:
        message.append(" ".join(map(str, i)))
    print(" ".join(message))
    return(0)

def print_matrice_cd(matrice, mat_size):
    i = 0
    print("Key matrix:")
    while i < mat_size:
        j = 0
        while j < mat_size:
            if j == mat_size - 1:
                print(matrice[i][j], end = '')
            else:
                if matrice[i][j] < 10:
                    print(matrice[i][j], end = '       ')
                elif 100 > matrice[i][j] >= 10:
                    print(matrice[i][j], end = '      ')
                elif matrice[i][j] >= 100:
                    print(matrice[i][j], end = '     ')
                    
            j += 1
        print("")
        i += 1

def matrice_cd(mat_size):
    matrice = [mat_size * [0] for i in range(mat_size)]
    i = 0
    k = 0
    if sys.argv[3] == "0":
        while i < mat_size:
            j = 0
            while j < mat_size and k < len(sys.argv[2]):
                matrice[i][j] = ord(sys.argv[2][k])
                j += 1
                k += 1
            i += 1
    return(matrice)

def check_for_err():
    halpmiplz = open("help", "r")

    if len(sys.argv) > 1 and sys.argv[1] == "-h":
        print(halpmiplz.read())
        sys.exit(0)
    elif len(sys.argv) < 4:
        print("Nowp ! Too few arguments. Try -h for more informations.")
        sys.exit(84)
    elif len(sys.argv) > 4:
        print("Nowp ! Too much arguments. Try -h for more informations.")

    try:
        flag = int(sys.argv[3])
    except ValueError:
        print("Nowp ! Flag error. Try -h for more informations.")
        sys.exit(84)

    if flag is not 1 and flag is not 0:
        print("Nowp ! Flag error. Try -h for more informations.")
        sys.exit(84)

def crypte(matrice_txt, matrice_cd, mat_size):
    mat_copy = [mat_size * [0] for i in range(len(matrice_txt))]
    i = 0
    while i < len(matrice_txt):
        j = 0
        while j < mat_size:
            k = 0
            while k < mat_size:
                mat_copy[i][j] += (matrice_cd[k][j] * matrice_txt[i][k])
                k += 1
            j += 1
        i += 1
    return(mat_copy)

check_for_err()
if len(sys.argv[2]) > 1:
    mat_size = get_mat_size()
else:
    mat_size = 1
matrice_txt = matrice_txt(mat_size)
matrice_cd = matrice_cd(mat_size)
print_matrice_cd(matrice_cd, mat_size)
matrice_txt = crypte(matrice_txt, matrice_cd, mat_size)
print_matrice_txt(matrice_txt, mat_size)
