#!/usr/bin/env python3
##
## EPITECH PROJECT, 2018
## 103_cipher
## File description:
## math
##

import sys
import math

def matrice_txt():
    matrice = []
    i = 0
    size = len(sys.argv[1])
    while i < size:
        matb = [0,0,0]
        j = 0
        while j < 3 and i < size:
            matb[j] = ord(sys.argv[1][i])
            j += 1
            i += 1
        matrice.append(matb)
    return(matrice)

def print_matrice_txt(matrice):
    i = 0
    print
    while i < len(matrice):
        j = 0
        while j < 3:
            print(matrice[i][j], end = ' ')
            j += 1
        i += 1
    print('')
    return(0)

def matrice_cd():
    matrice = [3 * [0] for i in range(3)]
    return(matrice)

def check_for_err():
    halpmiplz = open("help", "r")

    if len(sys.argv) > 1 and sys.argv[1] == "-h":
        print(halpmiplz.read())
        sys.exit(0)
    elif len(sys.argv) < 4:
        print("Nowp ! Too few arguments. Try -h for more informations.")
        sys.exit(84)
    elif len(sys.argv) > 4:
        print("Nowp ! Too much arguments. Try -h for more informations.")

    try:
        flag = int(sys.argv[3])
    except ValueError:
        print("Nowp ! Flag error. Try -h for more informations.")
        sys.exit(84)

    if flag is not 1 and flag is not 0:
        print("Nowp ! Flag error. Try -h for more informations.")
        sys.exit(84)
        
check_for_err()
matrice_txt = matrice_txt()
print_matrice_txt(matrice_txt)
